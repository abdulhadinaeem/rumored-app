import 'package:rumo_red_app/core/constants/imports.dart';

class PinJoinController extends GetxController {
  PinJoinController(
      {required this.isAutoGeneratedScreen,
      required this.isJoinScreen,
      required this.isByYourself,
      required this.isSpinWheelScreen,
      required this.isMinor,
      required this.isDrinkingGame,
      required this.isAutoParticipantsDrinking,
      required this.isWithoutMinorDrinking});
  bool isJoinScreen,
      isAutoGeneratedScreen,
      isAutoParticipantsDrinking,
      isMinor,
      isDrinkingGame,
      isByYourself,
      isWithoutMinorDrinking;
  bool isSpinWheelScreen = false;
  late TextEditingController pincontroller;
  GlobalKey<FormState> formkey = GlobalKey<FormState>();
  Random random = Random();
  int randomNumber = 0;
  late bool readonly;
  late String text;
  late Color color;

  void showText() {
    text = isJoinScreen ? Strings.enterPinToJoin : Strings.sharePinWitFriends;
    update();
  }

  void isReadOnly() {
    readonly = isJoinScreen ? false : true;
    update();
  }

  void showNumbers() {
    pincontroller = isJoinScreen
        ? pincontroller = TextEditingController()
        : pincontroller = TextEditingController(
            text: "$randomNumber",
          );
  }

  void backGroundColor() {
    color = isDrinkingGame || isWithoutMinorDrinking
        ? AppColors.drinkingScreenBackgroundTheme
        : isAutoParticipantsDrinking
            ? AppColors.drinkingScreenBackgroundTheme
            : isSpinWheelScreen
                ? AppColors.spinWheelScreenBackGroundColor
                : AppColors.primaryColor;
  }

  saveValue() {}

  void generateRandomNumbers() {
    randomNumber = 1000 + random.nextInt(9000);
    update();
  }

  void goTonextScreens() {
    if (isAutoParticipantsDrinking == true && isAutoGeneratedScreen == true) {
      Get.to(AutoParticipantsWithoutMinor(
        isSpinWheel: false,
        isWithoutMinorDrinking: isWithoutMinorDrinking,
        isAutoParticipantsDrinking: isAutoParticipantsDrinking,
      ));
    }
    if (isWithoutMinorDrinking == true && isAutoGeneratedScreen == true) {
      Get.to(
        () => AutoParticipantsWithoutMinor(
          isSpinWheel: false,
          isWithoutMinorDrinking: true,
          isAutoParticipantsDrinking: false,
        ),
      );
    }
    if (isDrinkingGame == true && isAutoGeneratedScreen == true) {
      Get.to(
        () => AutoParticipantsWithoutMinor(
          isAutoParticipantsDrinking: false,
          isSpinWheel: true,
          isWithoutMinorDrinking: false,
        ),
      );
    }
    if (isDrinkingGame == true && isByYourself == true) {
      Get.to(
        () => CreateQuizParicipantsScreen(
          isSpinWheelParticipants: true,
          isDrinkingGame: isDrinkingGame,
        ),
      );
    }
    if (isJoinScreen == true) {
      Get.to(
        () => const GetReadyScreen(),
      );
    }
    if (isByYourself == true) {
      Get.to(
        isSpinWheelScreen
            ? CreateQuizParicipantsScreen(
                isSpinWheelParticipants: true,
                isDrinkingGame: isDrinkingGame,
              )
            : CreateQuizParicipantsScreen(
                isSpinWheelParticipants: false,
                isDrinkingGame: isDrinkingGame,
              ),
      );
    }
    if (isAutoGeneratedScreen == true && isSpinWheelScreen == true) {
      AutoParticipantsWithoutMinor(
        isSpinWheel: isSpinWheelScreen,
        isAutoParticipantsDrinking: false,
        isWithoutMinorDrinking: false,
      );
    }

    if (isAutoGeneratedScreen == true) {
      Get.to(
        isMinor
            ? const AutoParticipantsScreenWithMinor()
            : AutoParticipantsWithoutMinor(
                isSpinWheel: isSpinWheelScreen,
                isAutoParticipantsDrinking: false,
                isWithoutMinorDrinking: false,
              ),
      );
    } else {
      return null;
    }
    update();
  }

  @override
  void onInit() {
    generateRandomNumbers();
    backGroundColor();
    showNumbers();

    isReadOnly();
    showText();
    super.onInit();
  }
}
